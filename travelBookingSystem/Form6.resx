<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="PictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>